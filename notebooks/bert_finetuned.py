# -*- coding: utf-8 -*-
"""finetuning_bert.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16bct4w3b4Zjna1KVKYKxeW9GnaGiYbHU
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd 'drive/My Drive/github-bug-classification'
# %pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd 'data'
!unzip 'archive.zip'
# %cd ..

!pip install transformers

import pandas as pd
from transformers import BertForSequenceClassification, Trainer, TrainingArguments

import torch

"""# Data tokenization"""

train = pd.read_json('data/embold_train.json')
train_extra = pd.read_json('data/embold_train_extra.json')
train = pd.concat([train, train_extra], ignore_index=True)
test = pd.read_json('data/embold_test.json')
# 0: bug, 1: feature, 2: question

train['text'] = train.title + ' ' + train.body
test['text'] = test.title + ' ' + test.body

train.head()

from sklearn.model_selection import train_test_split
train, val = train_test_split(train, test_size=.2)

train_texts = train[:2000].text.to_list()#to_numpy()
val_texts = val[:2000].text.to_list()#to_numpy()
test_texts = val[-2000:].text.to_list()
#test_texts = test[:2000].text.to_list()#to_numpy()

train_labels = train[:2000].label.to_list()
val_labels = val[:2000].label.to_list()
test_labels = val[-2000:].label.to_list()
#test_labels = test[:2000].label.to_list()

from transformers import DistilBertTokenizerFast
tokenizer = DistilBertTokenizerFast.from_pretrained('distilbert-base-uncased')

train_encodings = tokenizer(train_texts, truncation=True, padding=True)
val_encodings = tokenizer(val_texts, truncation=True, padding=True)
test_encodings = tokenizer(test_texts, truncation=True, padding=True)

"""# Datasets"""

import torch

class GitDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

train_dataset = GitDataset(train_encodings, train_labels)
val_dataset = GitDataset(val_encodings, val_labels)
test_dataset = GitDataset(test_encodings, test_labels)

"""# Fine-tuning"""

from sklearn.metrics import accuracy_score, precision_recall_fscore_support

def compute_metrics(pred):
    labels = pred.label_ids
    preds = pred.predictions.argmax(-1)
    #precision, recall, f1, _ = precision_recall_fscore_support(labels, preds, average='binary')
    acc = accuracy_score(labels, preds)
    return {
        'accuracy': acc,
        #'f1': f1,
        #'precision': precision,
        #'recall': recall
    }

#model = BertForSequenceClassification.from_pretrained("bert-base-uncased")
model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=3)

training_args = TrainingArguments(
    output_dir='./results',          # output directory
    num_train_epochs=3,              # total # of training epochs
    per_device_train_batch_size=2,  # batch size per device during training
    per_device_eval_batch_size=4,   # batch size for evaluation
    warmup_steps=500,                # number of warmup steps for learning rate scheduler
    weight_decay=0.01,               # strength of weight decay
    logging_dir='./logs',            # directory for storing logs
    logging_steps=10,
)

trainer = Trainer(
    model=model,                         # the instantiated ðŸ¤— Transformers model to be trained
    args=training_args,                  # training arguments, defined above
    train_dataset=train_dataset,         # training dataset
    eval_dataset=test_dataset,           # evaluation dataset
    compute_metrics = compute_metrics
)

model.to('cuda')

trainer.train()

trainer.evaluate()

